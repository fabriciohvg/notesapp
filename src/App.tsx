// src/App.tsx
import { useState, useEffect, FormEvent } from 'react';
import {
  Authenticator,
  Button,
  Text,
  TextField,
  Heading,
  Flex,
  View,
  Image,
  Grid,
  Divider,
} from '@aws-amplify/ui-react';
import { Amplify } from 'aws-amplify';
import '@aws-amplify/ui-react/styles.css';
import { getUrl, uploadData } from 'aws-amplify/storage';
import { generateClient, type Client } from 'aws-amplify/data';
import outputs from '../amplify_outputs.json';

import type { Schema } from '../amplify/data/resource'; // <-- generated by `amplify codegen models`

type Note = Schema['Note']['type'];

Amplify.configure(outputs);

const client: Client<Schema> = generateClient<Schema>({
  authMode: 'userPool',
});

export default function App() {
  const [notes, setNotes] = useState<Note[]>([]);

  // ───────────────────────────────────────────────────────────── fetch
  useEffect(() => {
    void fetchNotes();
  }, []);

  async function fetchNotes(): Promise<void> {
    const { data } = await client.models.Note.list();

    const withUrls = await Promise.all(
      data.map(async (note) => {
        if (!note.image) return note;

        const { url } = await getUrl({
          path: ({ identityId }) => `media/${identityId}/${note.image}`,
        });
        return { ...note, image: url.toString() };
      }),
    );

    setNotes(withUrls);
  }

  // ───────────────────────────────────────────────────────────── create
  async function createNote(event: FormEvent<HTMLFormElement>): Promise<void> {
    event.preventDefault();
    const form = new FormData(event.currentTarget);

    const imageFile = form.get('image') as File | null;

    const { data: newNote } = await client.models.Note.create({
      name: form.get('name') as string,
      description: form.get('description') as string,
      image: imageFile?.name ?? '',
    });

    if (newNote.image && imageFile) {
      await uploadData({
        path: ({ identityId }) => `media/${identityId}/${newNote.image}`,
        data: imageFile,
      }).result;
    }

    await fetchNotes();
    event.currentTarget.reset();
  }

  // ───────────────────────────────────────────────────────────── delete
  async function deleteNote(note: Pick<Note, 'id'>): Promise<void> {
    await client.models.Note.delete({ id: note.id });
    await fetchNotes();
  }

  // ───────────────────────────────────────────────────────────── UI
  return (
    <Authenticator>
      {({ signOut }) => (
        <Flex
          as="main"
          className="App"
          direction="column"
          alignItems="center"
          justifyContent="center"
          width="70%"
          margin="0 auto"
        >
          <Heading level={1}>My Notes App</Heading>

          <View as="form" margin="3rem 0" onSubmit={createNote}>
            <Flex direction="column" gap="2rem" padding="2rem">
              <TextField
                name="name"
                placeholder="Note Name"
                label="Note Name"
                labelHidden
                variation="quiet"
                required
              />
              <TextField
                name="description"
                placeholder="Note Description"
                label="Note Description"
                labelHidden
                variation="quiet"
                required
              />
              <View
                name="image"
                as="input"
                type="file"
                alignSelf="end"
                accept="image/png, image/jpeg"
              />
              <Button type="submit" variation="primary">
                Create Note
              </Button>
            </Flex>
          </View>

          <Divider />

          <Heading level={2}>Current Notes</Heading>
          <Grid
            margin="3rem 0"
            autoFlow="column"
            justifyContent="center"
            gap="2rem"
            alignContent="center"
          >
            {notes.map((note) => (
              <Flex
                key={note.id ?? note.name}
                direction="column"
                alignItems="center"
                gap="2rem"
                border="1px solid #ccc"
                padding="2rem"
                borderRadius="8px"
              >
                <Heading level={3}>{note.name}</Heading>
                <Text fontStyle="italic">{note.description}</Text>
                {note.image && (
                  <Image
                    src={note.image}
                    alt={`visual aid for ${note.name}`}
                    style={{ width: 400 }}
                  />
                )}
                <Button
                  variation="destructive"
                  onClick={() => deleteNote(note)}
                >
                  Delete note
                </Button>
              </Flex>
            ))}
          </Grid>

          <Button onClick={signOut}>Sign Out</Button>
        </Flex>
      )}
    </Authenticator>
  );
}
